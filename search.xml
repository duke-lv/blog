<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[[译]使用Node.js 构建API网关]]></title>
    <url>%2Fblog%2F2018%2F07%2F18%2F1%2F</url>
    <content type="text"><![CDATA[原创作者：by Péter Márton(@slashdotpeter), CTO at RisingStack, microservices and brewing beer with Node.js 原创链接：https://blog.risingstack.com/building-an-api-gateway-using-nodejs/ 在微服务架构中，在让外部客户端访问服务时，有一些公共的需求，例如：权限认证、数据传输等等。而API 网关能够提供一个共享层来处理服务协议之间的差异，并能够满足特定客户端的需求，例如：浏览器端，移动客户端以及历史遗留系统等。 一 微服务与服务消费者二 API网关是什么？具有哪些特质？三 面向前端团队的Node.js API网关四 API网关功能4.1 路由和版本控制4.2 演进式设计4.3 鉴权4.4 数据聚合4.5 序列化格式转换4.6 协议转换4.7 限流和缓存4.8 有规划的API网关五 Node.js API网关六 Node.js API网关总结]]></content>
      <categories>
        <category>microservice Node.js</category>
      </categories>
      <tags>
        <tag>微服务 node  nodejs node.js API Gateway API网关</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用kubeadm 在centOS 7.4部署单master kubernetes 1.11 集群]]></title>
    <url>%2Fblog%2F2018%2F07%2F18%2F1%2F</url>
    <content type="text"><![CDATA[一.前言本文开始之前假定你对kubernetes有一定的了解，掌握kubernetes基础架构，核心组件，核心对象。 掌握基础linux知识。 从本文你将得到完整的kubernetes集群部署知识，以及作者部署过程中的填坑经历。 二.环境准备1.服务器环境 首先至少准备好两台服务器，或者虚拟机，装好centOS7.4系统；虚拟机的话，配置好静态IP，配置方法可以参考下文: https://blog.csdn.net/alex_bean/article/details/53487918 假设我们有三台主机，IP分别为： 192.168.2.226 master 192.168.2.227 node1 192.168.2.228 node2 接下来我们三台服务器进行环境配置。 2.Docker安装与配置3.kubeadm组件安装与配置]]></content>
      <categories>
        <category>Cloud Native  kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes k8s  kubeadm</tag>
      </tags>
  </entry>
</search>
